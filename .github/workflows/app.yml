on:
  push:
  workflow_dispatch:
    inputs:
      environmentselector:
        description: "Environment selector"
        required: false
        default: "default"

jobs:
  setup:
    name: Choose Secrets Environment Job
    runs-on: windows-latest
    steps:
      - id: setup
        name: Setup Environment Setp
        run: |
          $envSelector = "${{ github.event.inputs.environmentselector }}"
          Write-Host "Environment Selector: $envSelector Branch ${{ github.ref }}"
          if ($envSelector -eq '' -or $envSelector -eq 'default') {            
            if ('${{ github.ref }}' -eq 'refs/heads/main') { 
              echo "::set-output name=build_env::prod"
              echo "::set-output name=skip_functional_test::true" 
            } else {
              echo "::set-output name=build_env::dev"
              echo "::set-output name=skip_functional_test::false" 
            }
          } else {
            echo "::set-output name=build_env::$envSelector"
            echo "::set-output name=skip_functional_test::true" 
          }
    outputs:
      build_env: ${{ steps.setup.outputs.build_env }}
      skip_functional_test: ${{ steps.setup.outputs.skip_functional_test }}

  build_deploy:
    name: Build, Deploy Environment Job
    needs: setup
    environment: ${{ needs.setup.outputs.build_env }}
    env:
      postmanVarFilePath: ${{ github.workspace }}\environment.json
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.MS_AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Setup .NET Core SDK 3.1.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "3.1.x"          

      - id: buildenvironment
        name: Build Azure environment
        run: |
          .\Deployment\BuildEnv.ps1 -BUILD_ENV ${{ needs.setup.outputs.build_env }} `
            -RESOURCE_GROUP ${{ secrets.RESOURCE_GROUP }} `
            -PREFIX ${{ secrets.PREFIX }} `
            -GITHUB_REF ${{ github.ref }} `
            -RUN_NUMBER ${{ github.run_number }} `
            -JWT_CONFIG_APP_ID ${{ secrets.JWT_CONFIG_APP_ID }} `
            -JWT_CONFIG_TENANT_ID ${{ secrets.JWT_CONFIG_TENANT_ID }} `
            -PUBLISHER_EMAIL ${{ secrets.PUBLISHER_EMAIL }} `
            -PUBLISHER_NAME "${{ secrets.PUBLISHER_NAME }}"

      - name: Create
        uses: azure/powershell@v1
        id: getsubscriptionkey
        with:
          inlineScript: |
            .\Deployment\SetupPostmanTest.ps1 -RESOURCE_GROUP ${{ secrets.RESOURCE_GROUP }} `
              -StackName ${{ steps.buildenvironment.outputs.stackName }} `
              -JWT_CONFIG_APP_ID ${{ secrets.JWT_CONFIG_APP_ID }} `
              -JWT_CONFIG_APP_SECRET ${{ secrets.JWT_CONFIG_APP_SECRET }} `
              -JWT_CONFIG_TENANT_ID ${{ secrets.JWT_CONFIG_TENANT_ID }} `
              -FilePath ${{ env.postmanVarFilePath }}
          azPSVersion: "latest"            

      - name: Run API Tests
        id: run-newman
        uses: anthonyvscode/newman-action@v1
        with:
          collection: Test\APIM-Managed.postman_collection.json
          environment: ${{ env.postmanVarFilePath }}
          reporters: cli

      - name: Output summary to console
        run: echo ${{ steps.run-newman.outputs.summary }}            